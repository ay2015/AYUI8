<local:ElementStylesBase x:Class="ay.Wpf.Theme.Element.AllControlsResourceDictionary"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                         xmlns:ay="http://www.ayjs.net/2020"
                         xmlns:local="clr-namespace:ay.Wpf.Theme.Element">
    <local:ElementStylesBase.MergedDictionaries>
        <ResourceDictionary Source="/ay.Wpf.Theme.Element;component/Resources/SharedResources.xaml"  />
        <ResourceDictionary Source="/ay.Wpf.Theme.Element;component/AutoBrush.xaml"  />
    </local:ElementStylesBase.MergedDictionaries>
    <Geometry x:Key="checkBoxGeometry">M896 288a32 32 0 0 0-54.656-22.592L416 690.752 182.656 457.408a32 32 0 1 0-45.264 45.232l255.952 255.952c5.808 5.824 13.808 9.408 22.656 9.408s16.848-3.584 22.64-9.392l447.952-447.952c5.824-5.808 9.408-13.808 9.408-22.656z</Geometry>
    <PathGeometry x:Key="AyComboArrow" Figures="M1.5999756,0L16,14.399989 30.399963,0 32,1.6000057 16,17.599999 0,1.6000057z" />
    <LeftIndentConverter
        x:Key="IndentConverter"
        Indent="12" IsResource="True"
        MarginLeft="5" />

    <DataTemplate x:Key="DefaultToolTipTemplate">
        <ay:AyText Foreground="{StaticResource colorprimary}" Focusable="False" Text="{Binding}" VerticalAlignment="Center"/>
    </DataTemplate>


    <Style TargetType="ay:AyText" BasedOn="{StaticResource {x:Type ay:AyText}}">
        <Setter Property="Foreground" Value="{StaticResource colortextprimary}" />
    </Style>
    <Style x:Key="BorderStyle" TargetType="ay:TemplateBorder">
        <Setter Property="Background" Value="{StaticResource colorwhite}" />
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
    <Style x:Key="AyTooltipTyle" TargetType="{x:Type ay:AyTooltip}">
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="RadiusX" Value="4"></Setter>
        <Setter Property="RadiusY" Value="4"></Setter>
        <Setter Property="MaxWidth" Value="400"></Setter>
        <Setter Property="MinWidth" Value="40"></Setter>
        <Setter Property="MinHeight" Value="40"></Setter>
        <Setter Property="Foreground"
                Value="{StaticResource colorprimary}" />
        <Setter Property="Background"
                Value="{StaticResource colorprimary2}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource colorprimary5}" />
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTooltip}">
                    <Grid  Height="{TemplateBinding Height}" VerticalAlignment="Bottom" HorizontalAlignment="Right" MaxWidth="{TemplateBinding MaxWidth}" MinWidth="{TemplateBinding MinWidth}">
                        <Rectangle x:Name="bg" Fill="{TemplateBinding Background}" RadiusX="{TemplateBinding RadiusX}" RadiusY="{TemplateBinding RadiusY}"
                   Margin="{TemplateBinding RectangleMargin}" Stroke="{TemplateBinding BorderBrush}"/>
                        <Grid HorizontalAlignment="{TemplateBinding SanJiaoHorizontalAlignment}" x:Name="sanjiaoxing" Height="{TemplateBinding SanJiaoHeight}"
              Margin="{TemplateBinding SanJiaoMargin}" 
              VerticalAlignment="{TemplateBinding SanJiaoVerticalAlignment}"
              Width="{TemplateBinding SanJiaoWidth}" RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding SanJiaoAngle,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTooltip},Mode=FindAncestor}}"/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Path  Data="M130.46043,45.517986 L74.061585,97.392073 183.84562,97.895759 z"  Fill="{Binding ElementName=bg,Path=Fill}" Stretch="Fill" Stroke="{TemplateBinding BorderBrush}" 
                    Height="8.974" VerticalAlignment="Bottom">
                            </Path>
                            <Path Data="M130.46043,45.517986 L74.061585,97.392073 183.84562,97.895759 z" Stretch="Fill" Height="7.886" 
                  VerticalAlignment="Bottom"  Fill="{Binding ElementName=bg,Path=Fill}" UseLayoutRounding="False" Margin="-1,0,-1,-1"/>
                        </Grid>
                        <Border Margin="{TemplateBinding ContentMargin}" VerticalAlignment="Top" HorizontalAlignment="Left">
                            <ContentPresenter Name="PART_ToolTipHost" Content="{TemplateBinding TooltipContent}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" 
                                              ContentTemplate="{Binding ToolTipDataTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultToolTipTemplate}}" />

                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonTransparent" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="aythumbborder">
                        <!--<VisualStateManager.VisualStateGroups> <VisualStateGroup x:Name="CommonStates"> <VisualStateGroup.Transitions> <VisualTransition GeneratedDuration="0:0:0.3"/> </VisualStateGroup.Transitions> <VisualState x:Name="Normal"/> <VisualState x:Name="MouseOver"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Pressed"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.95"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Disabled">  </VisualState> </VisualStateGroup> </VisualStateManager.VisualStateGroups>-->
                        <Rectangle
                            x:Name="rectangle"
                            Height="{TemplateBinding Height}"
                            Fill="{StaticResource colortextregular}"
                            RadiusX="{StaticResource ScrollBarRadius}"
                            RadiusY="{StaticResource ScrollBarRadius}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="ayhorthumbborder">
                        <!--<VisualStateManager.VisualStateGroups> <VisualStateGroup x:Name="CommonStates"> <VisualStateGroup.Transitions> <VisualTransition GeneratedDuration="0:0:0.3"/> </VisualStateGroup.Transitions> <VisualState x:Name="Normal"/> <VisualState x:Name="MouseOver"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState> <VisualState x:Name="Pressed"> <Storyboard> <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle"> <EasingDoubleKeyFrame KeyTime="0" Value="0.95"/> </DoubleAnimationUsingKeyFrames> </Storyboard> </VisualState>  </VisualStateGroup> </VisualStateManager.VisualStateGroups>-->
                        <Rectangle
                            x:Name="rectangle"
                            Height="{TemplateBinding Height}"
                            Fill="{StaticResource colortextregular}"
                            RadiusX="{StaticResource ScrollBarRadius}"
                            RadiusY="{StaticResource ScrollBarRadius}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AyScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Storyboard x:Key="AyScrollMouseOver">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="12">

                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="AyScrollMouseOut">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.2">
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="2">

                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="{StaticResource ScrollViewerWH}" />
        <Setter Property="MinWidth" Value="8.0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Background="Transparent"
                        x:Name="Bg" Width="{TemplateBinding Width}"
                        SnapsToDevicePixels="true">
                        <Track
                            x:Name="PART_Track" Margin="0,0,1,0"
                            IsDirectionReversed="true" Width="2" HorizontalAlignment="Right"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Opacity="0.2">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOut}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOver}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{StaticResource ScrollViewerWH}" />
                <Setter Property="MinHeight" Value="8.0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="AyScrollMouseOverH">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="12">

                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="AyScrollMouseOutH">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.2">
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="2">

                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Height="{TemplateBinding Height}" Background="Transparent"
                                x:Name="Bg"
                                SnapsToDevicePixels="true">
                                <Track
                                    x:Name="PART_Track" Margin="0,0,0,1"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Opacity="0.2" Height="2" VerticalAlignment="Bottom"
                                    Visibility="Hidden">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOutH}" />
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOverH}" />
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AyScrollBarHideStyle" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Storyboard x:Key="AyScrollMouseOver">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="12">

                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="AyScrollMouseOut">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="2">

                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="{StaticResource ScrollViewerWH}" />
        <Setter Property="MinWidth" Value="8.0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Background="Transparent"
                        x:Name="Bg" Width="{TemplateBinding Width}"
                        SnapsToDevicePixels="true">
                        <Track
                            x:Name="PART_Track" Margin="0,0,1,0"
                            IsDirectionReversed="true" Width="2" HorizontalAlignment="Right"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Opacity="0.2">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOut}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOver}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{StaticResource ScrollViewerWH}" />
                <Setter Property="MinHeight" Value="8.0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="AyScrollMouseOverH">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.9">
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="12">

                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="AyScrollMouseOutH">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="2">

                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Height="{TemplateBinding Height}" Background="Transparent"
                                x:Name="Bg"
                                SnapsToDevicePixels="true">
                                <Track
                                    x:Name="PART_Track" Margin="0,0,0,1"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Opacity="0.2" Height="2" VerticalAlignment="Bottom"
                                    Visibility="Hidden">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOutH}" />
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource AyScrollMouseOverH}" />
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Style.Resources />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            x:Name="PART_ScrollContentPresenter"
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Style="{StaticResource AyScrollBarStyle}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Style="{StaticResource AyScrollBarStyle}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollViewerHideStyle" TargetType="{x:Type ay:ScrollViewerHide}">
        <Style.Resources />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:ScrollViewerHide}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            x:Name="PART_ScrollContentPresenter"
                            Grid.Row="0"
                            Grid.RowSpan="2"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Style="{StaticResource AyScrollBarHideStyle}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Style="{StaticResource AyScrollBarHideStyle}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="18,8" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
    </Style>
    <DataTemplate x:Key="DefaultBusyTemplate">
        <ay:AyText  FontSize="24" Focusable="False" Text="{Binding}" VerticalAlignment="Center"/>
    </DataTemplate>
    <Style x:Key="ayAyMaskViewBase" TargetType="{x:Type ContentControl}" >
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="#C9FFFFFF"></Setter>
        <!--<Setter Property="Text" Value="{DynamicResource share_pleasewait}" />-->
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0" />
        <Setter Property="Foreground" Value="{StaticResource colorwhite}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="NaN" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="NaN" />
    </Style>
    <Style x:Key="ayAyMaskView" TargetType="{x:Type ay:AyMaskView}" BasedOn="{StaticResource ayAyMaskViewBase}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyMaskView}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <ay:HorizontalPoingLoading  FillBrush="{StaticResource colorprimary}" EllipseDiameter="16" Foreground="{StaticResource colorprimary}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ayAyMaskTextView" TargetType="{x:Type ay:AyMaskTextView}" BasedOn="{StaticResource ayAyMaskViewBase}">
        <Setter Property="MaskTemplate" Value="{StaticResource DefaultBusyTemplate}" />
        <Setter Property="Text" Value="{DynamicResource share_pleasewait}" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyMaskTextView}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ContentPresenter Name="PART_MaskHost" Content="{TemplateBinding Text}"
                                                  IsHitTestVisible="False" Margin="{TemplateBinding Margin}"  
                                              ContentTemplate="{Binding MaskTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultBusyTemplate}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ayLinkTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Padding" Value="4,2" />
    </Style>
    <Style x:Key="View.Text" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="ay:UIBase.TextAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource colortextregular}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.IconWidth" Value="NaN" />
        <Setter Property="ay:UIBase.IconHeight" Value="NaN" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ay:AyText TextWrapping="NoWrap" TextAlignment="{TemplateBinding  ay:UIBase.TextAlignment}" TextTrimming="CharacterEllipsis"  Text="{TemplateBinding Content}" Width="{TemplateBinding ay:UIBase.IconWidth}" 
                                   Height="{TemplateBinding ay:UIBase.IconHeight}"   Name="Content" HorizontalAlignment="{TemplateBinding ContentControl.HorizontalContentAlignment}" FontSize="{TemplateBinding FontSize}"
                                   Margin="{TemplateBinding ContentControl.Padding}" VerticalAlignment="{TemplateBinding ContentControl.VerticalContentAlignment}"  Foreground="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="View.Text.Left" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Text}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4,0,0,4" />
    </Style>
    <Style x:Key="View.Text.Right" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Text}">
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0,4,4,0" />
    </Style>

    <Style x:Key="View.TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="Height" Value="40" />

        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.IconWidth" Value="NaN" />
        <Setter Property="ay:UIBase.IconHeight" Value="NaN" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ay:AyText TextWrapping="NoWrap" TextAlignment="Center" TextTrimming="CharacterEllipsis" Foreground="{StaticResource colortextregular}" Text="{TemplateBinding Content}" Width="{TemplateBinding ay:UIBase.IconWidth}" 
                                   Height="{TemplateBinding ay:UIBase.IconHeight}"   Name="buttonContent" HorizontalAlignment="{TemplateBinding ContentControl.HorizontalContentAlignment}"
                                   Margin="{TemplateBinding ContentControl.Padding}" VerticalAlignment="{TemplateBinding ContentControl.VerticalContentAlignment}"  />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="View.TextButton.Left" TargetType="{x:Type Button}" BasedOn="{StaticResource View.TextButton}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4,0,0,4" />
    </Style>
    <Style x:Key="View.TextButton.Right" TargetType="{x:Type Button}" BasedOn="{StaticResource View.TextButton}">
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0,4,4,0" />
    </Style>

    <Style x:Key="View.Icon" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.IconWidth" Value="NaN" />
        <Setter Property="ay:UIBase.IconHeight" Value="NaN" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" 
                                      Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                      Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="View.Icon.Left" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Icon}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4,0,0,4" />
    </Style>
    <Style x:Key="View.Icon.Right" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Icon}">
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0,4,4,0" />
    </Style>

    <Style x:Key="View.IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.IconWidth" Value="NaN" />
        <Setter Property="ay:UIBase.IconHeight" Value="NaN" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="View.IconButton.Left" TargetType="{x:Type Button}" BasedOn="{StaticResource View.IconButton}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4,0,0,4" />
    </Style>
    <Style x:Key="View.IconButton.Right" TargetType="{x:Type Button}" BasedOn="{StaticResource View.IconButton}">
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0,4,4,0" />
    </Style>

    <Style x:Key="View.Content" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="auto" />

        <Setter Property="Height" Value="40" />
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="ay:UIBase.IconWidth" Value="NaN" />
        <Setter Property="ay:UIBase.IconHeight" Value="NaN" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                          RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="View.Content.Left" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Content}">
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4,0,0,4" />
    </Style>
    <Style x:Key="View.Content.Right" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Content}">
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0,4,4,0" />
    </Style>

    <Style x:Key="Tag.RoundBase" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Text}">
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="14" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}" />
    </Style>
    <Style x:Key="Tag.SquareBase" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource View.Text}">
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}" />
    </Style>
    <Style x:Key="Tag.Default.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colortextregular}" />
        <Setter Property="Foreground" Value="{StaticResource colortextregular}" />
    </Style>
    <Style x:Key="Tag.Primary.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorprimary}" />
        <Setter Property="Foreground" Value="{StaticResource colorprimary}" />
    </Style>
    <Style x:Key="Tag.Success.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorsuccess}" />
        <Setter Property="Foreground" Value="{StaticResource colorsuccess}" />
    </Style>
    <Style x:Key="Tag.Warning.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorwarning}" />
        <Setter Property="Foreground" Value="{StaticResource colorwarning}" />
    </Style>
    <Style x:Key="Tag.Danger.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colordanger}" />
        <Setter Property="Foreground" Value="{StaticResource colordanger}" />
    </Style>
    <Style x:Key="Tag.Info.Round" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.RoundBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorinfo}" />
        <Setter Property="Foreground" Value="{StaticResource colorinfo}" />
    </Style>
    <Style x:Key="Tag.Default.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Foreground" Value="{StaticResource colortextregular}" />
        <Setter Property="Background" Value="{StaticResource colorwhite}" />
    </Style>
    <Style x:Key="Tag.Primary.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorprimary5}" />
        <Setter Property="Foreground" Value="{StaticResource colorprimary}" />
        <Setter Property="Background" Value="{StaticResource colorprimary2}" />
    </Style>
    <Style x:Key="Tag.Success.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorsuccess5}" />
        <Setter Property="Foreground" Value="{StaticResource colorsuccess}" />
        <Setter Property="Background" Value="{StaticResource colorsuccess2}" />
    </Style>
    <Style x:Key="Tag.Warning.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorwarning5}" />
        <Setter Property="Foreground" Value="{StaticResource colorwarning}" />
        <Setter Property="Background" Value="{StaticResource colorwarning2}" />
    </Style>
    <Style x:Key="Tag.Danger.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colordanger5}" />
        <Setter Property="Foreground" Value="{StaticResource colordanger}" />
        <Setter Property="Background" Value="{StaticResource colordanger2}" />
    </Style>
    <Style x:Key="Tag.Info.Square" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Tag.SquareBase}">
        <Setter Property="BorderBrush" Value="{StaticResource colorinfo5}" />
        <Setter Property="Foreground" Value="{StaticResource colorinfo}" />
        <Setter Property="Background" Value="{StaticResource colorinfo2}" />
    </Style>



    <Style x:Key="ayRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Padding" Value="20,10" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
    </Style>
    <Style x:Key="RepeatButton.AyFormInput.Icon" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ayRepeatButton}">
        <Setter Property="ay:UIBase.Icon" Value="{StaticResource more_element_Int_Add}" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        </Border>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Default" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary5},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary2},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary2},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource bordercolorbase},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorprimary5}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorprimary2}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Primary" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" >
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorprimary3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Success" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}"  BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" >
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">

                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorsuccess3}"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Info" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}"  BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" >
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">

                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorinfo3}"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Warning" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" >
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">

                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorwarning3}"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Danger" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" >
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colordanger3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button.Default.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Primary.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Success.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorsuccess3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Info.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorinfo3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Warning.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwarning3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Danger.LinkText" TargetType="{x:Type Button}" BasedOn="{StaticResource ayLinkTextButton}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ay:AyText Name="buttonContent" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" >
                            <ay:AyText.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger},Path=Color}" />
                            </ay:AyText.Foreground>
                        </ay:AyText>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colordanger3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ay:UIBase.HasUnderLine" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextBlock.TextDecorations" TargetName="buttonContent">
                                <Setter.Value>
                                    <TextDecorationCollection>
                                        <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                                    </TextDecorationCollection>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="Button.Default.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource bordercolorbase},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorprimary}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Primary.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary5},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary2},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorprimary}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorprimary}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwhite}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Success.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess5},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess2},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorsuccess}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorsuccess}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwhite}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Info.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo5},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo2},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorinfo}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorinfo}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwhite}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Warning.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning5},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning2},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colorwarning}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colorwarning}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwhite}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Danger.Flat" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="border" CornerRadius="{TemplateBinding  ay:UIBase.CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger5},Path=Color}" />
                            </Border.BorderBrush>
                            <Border.Background>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger2},Path=Color}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource colordanger}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource colordanger}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorwhite}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Default.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Default}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Primary.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Primary}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Success.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Success}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Info.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Info}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Warning.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Warning}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Danger.Round" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Danger}">
        <Setter Property="Control.Padding" Value="23,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="20" />
    </Style>
    <Style x:Key="Button.Default.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Default}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_search" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Stroke>
                                <SolidColorBrush Color="{Binding Source={StaticResource bordercolorbase},Path=Color}" />
                            </Ellipse.Stroke>
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary5},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary2},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary2},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Stroke" Value="{StaticResource colorprimary5}"/>
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colorprimary2}"/>
                            <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="{StaticResource colorprimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Primary.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Primary}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_edit" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorprimary},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colorprimary3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Success.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Success}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_right" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorsuccess},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorsuccess4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colorsuccess3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Info.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Info}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_info" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorinfo},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorinfo4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colorinfo3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Warning.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Warning}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_star" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwarning},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorwarning4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colorwarning3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button.Danger.Ellipse" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Danger}">
        <Setter Property="ay:UIBase.Icon" Value="path_element_delete" />
        <Setter Property="ay:UIBase.IconWidth" Value="12" />
        <Setter Property="ay:UIBase.IconHeight" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Ellipse Name="border"  StrokeThickness="{TemplateBinding BorderThickness}" Stretch="Uniform">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="{Binding Source={StaticResource colordanger},Path=Color}" />
                            </Ellipse.Fill>
                        </Ellipse>
                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}" Width="{TemplateBinding ay:UIBase.IconWidth}" Height="{TemplateBinding ay:UIBase.IconHeight}" Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colorwhite},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger3},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colordanger4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="Fill" Value="{StaticResource colordanger3}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ayRadioButton" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
    </Style>
    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ayRadioButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Ellipse IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}" StrokeThickness="2" Width="14" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Ellipse.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Ellipse.Effect>
                                </Ellipse>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">

                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="4">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="4">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard/>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="grid">

                            <Ellipse Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="radioButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Ellipse x:Name="optionMark" Fill="{StaticResource colorwhite}" Width="0" Height="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButton.Square" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ayRadioButton}">
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <!--<Ellipse IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}" StrokeThickness="2"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Ellipse.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Ellipse.Effect>
                                </Ellipse>-->
                                <Ellipse IsHitTestVisible="False" Margin="12,0,0,0" x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}"  StrokeThickness="2" Width="14" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Ellipse.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Ellipse.Effect>
                                </Ellipse>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" Padding="12,8">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">

                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="4">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="4">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard/>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="templateRoot" Background="Transparent" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>


                            <Grid x:Name="grid">
                                <Ellipse Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="radioButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                <Ellipse x:Name="optionMark" Fill="{StaticResource colorwhite}" Width="0" Height="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Grid>

                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                                </TextElement.Foreground>
                            </ContentPresenter>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButton.Group" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ayRadioButton}">
        <Setter Property="ay:UIBase.CornerRadius" Value="0" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}"  StrokeThickness="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Rectangle.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" BorderThickness="1" Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" Padding="12,8">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentHoverPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard/>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="templateRoot" Background="Transparent" >
                            <ContentPresenter Visibility="Collapsed" x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                            <ContentPresenter x:Name="contentHoverPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="contentHoverPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ayCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
    </Style>
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ayCheckBox}">
        <Style.Resources>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normal">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate"/>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <Grid x:Name="grid">
                        <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>

                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <TextElement.Foreground>
                            <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                        </TextElement.Foreground>
                    </ContentPresenter>
                </Grid>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normalThree">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>


                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>

                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <Grid x:Name="grid">
                        <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle Stretch="Uniform"  x:Name="optionMarkNull"  Fill="{StaticResource colorwhite}" Width="4" RenderTransformOrigin="0.5,0.5" Height="4" HorizontalAlignment="Center" VerticalAlignment="Center" >
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>

                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <TextElement.Foreground>
                            <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                        </TextElement.Foreground>
                    </ContentPresenter>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="false">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Visible"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False"  RadiusX="1" RadiusY="1"   Stroke="{StaticResource colorprimary}" StrokeThickness="2" Width="14" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Rectangle.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource normal}"></Setter>
        <Style.Triggers>
            <Trigger Property="IsThreeState" Value="true">
                <Setter Property="Template" Value="{StaticResource normalThree}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CheckBox.Text" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ayCheckBox}">
        <Style.Resources>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normal">
                <Grid x:Name="templateRoot"  Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate"/>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <Grid x:Name="grid"  >
                        <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>

                    <ay:AyText TextAlignment="{TemplateBinding ay:UIBase.TextAlignment}" x:Name="contentPresenter"
                              
                               Foreground="{StaticResource colortextregular}"
                               Text="{TemplateBinding Content}" Grid.Column="1" TextWrapping="NoWrap" 
                               TextTrimming="CharacterEllipsis" Focusable="False" 
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    </ay:AyText>
                </Grid>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normalThree">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>


                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>

                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <Grid x:Name="grid">
                        <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle Stretch="Uniform"  x:Name="optionMarkNull"  Fill="{StaticResource colorwhite}" Width="4" RenderTransformOrigin="0.5,0.5" Height="4" HorizontalAlignment="Center" VerticalAlignment="Center" >
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>

                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <TextElement.Foreground>
                            <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                        </TextElement.Foreground>
                    </ContentPresenter>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="false">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Visible"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="ay:UIBase.TextAlignment" Value="Left"/>
        <Setter Property="ay:UIBase.IconWidth" Value="180"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False"  RadiusX="1" RadiusY="1"   Stroke="{StaticResource colorprimary}" StrokeThickness="2" Width="14" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Rectangle.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource normal}"></Setter>
        <Style.Triggers>
            <Trigger Property="IsThreeState" Value="true">
                <Setter Property="Template" Value="{StaticResource normalThree}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CheckBox.Square" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ayCheckBox}">
        <Style.Resources>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normal">
                <Border x:Name="border" BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" Padding="12,8">

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate"/>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>


                        <Grid x:Name="grid">
                            <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate TargetType="{x:Type CheckBox}" x:Key="normalThree">
                <Border x:Name="border" BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" Padding="12,8">

                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                            <VisualState x:Name="Checked">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMark">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>


                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Unchecked">
                                <Storyboard/>
                            </VisualState>
                            <VisualState x:Name="Indeterminate">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>

                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="optionMarkNull">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="ButtonBorder">
                                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            <EasingColorKeyFrame.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </EasingColorKeyFrame.EasingFunction>
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>


                        <Grid x:Name="grid">
                            <Rectangle RadiusX="1" RadiusY="1" Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="ButtonBorder" Fill="#FFFFFF" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Path Stretch="Uniform"  x:Name="optionMark"  Stroke="{StaticResource colorwhite}" Width="8" RenderTransformOrigin="0.5,0.5" Height="6" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource checkBoxGeometry}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Rectangle Stretch="Uniform"  x:Name="optionMarkNull"  Fill="{StaticResource colorwhite}" Width="4" RenderTransformOrigin="0.5,0.5" Height="4" HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="false">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter TargetName="optionMark" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="optionMarkNull" Property="Visibility" Value="Visible"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <!--<Ellipse IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}" StrokeThickness="2"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Ellipse.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Ellipse.Effect>
                                </Ellipse>-->
                                <Rectangle IsHitTestVisible="False" RadiusX="1" RadiusY="1" Margin="12,0,0,0" x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}"  StrokeThickness="2" Width="14" Height="14" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Rectangle.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource normal}"></Setter>
        <Style.Triggers>
            <Trigger Property="IsThreeState" Value="true">
                <Setter Property="Template" Value="{StaticResource normalThree}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CheckBox.Group" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ayCheckBox}">
        <Setter Property="ay:UIBase.CornerRadius" Value="0" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}"  StrokeThickness="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Rectangle.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="border" BorderThickness="1" Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" Padding="12,8">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentHoverPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource colorwhite},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard/>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="templateRoot" Background="Transparent" >
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                            <ContentPresenter x:Name="contentHoverPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextElement.Foreground>
                                    <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                                </TextElement.Foreground>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="contentHoverPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ayTextBox" TargetType="{x:Type ay:AyTextBoxBase}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource colorwhite}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource colorprimary}"/>
        <Setter Property="Padding" Value="6,0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="180"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="Validation.ErrorTemplate"  Value="{x:Null}"/>
    </Style>
    <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type ay:AyTextBoxBase}" BasedOn="{StaticResource ayTextBox}">

        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border IsHitTestVisible="False" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource colorprimary}"  BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTextBoxBase}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">

                        </Border>
                        <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">

                        </Border>
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"       VerticalAlignment="Stretch"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                            <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="DefaultPlaceholderTemplate">
        <ay:AyText Foreground="{StaticResource colortextplaceholder}" Focusable="False" Text="{Binding}" />
    </DataTemplate>
    <DataTemplate x:Key="DefaultWrapPlaceholderTemplate">
        <ay:AyText Foreground="{StaticResource colortextplaceholder}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Focusable="False" Text="{Binding}" />
    </DataTemplate>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type ay:AyTextBox}" BasedOn="{StaticResource ayTextBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border IsHitTestVisible="False" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource colorprimary}"  BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="PlaceholderTemplate" Value="{StaticResource DefaultPlaceholderTemplate}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type  ay:AyTextBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        </Border>
                        <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                        </Border>
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <ScrollViewer     Margin="{TemplateBinding Padding}"
                                                      x:Name="PART_ContentHost"
                                                      VerticalAlignment="Stretch" AutomationProperties.Name="ScrollViewer" 
                                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                     />
                            <ContentPresenter Name="PART_PlaceholderHost" Content="{TemplateBinding Placeholder}" VerticalAlignment="{TemplateBinding ay:UIBase.PlaceholderVerticalAlignment}" 
                                                  HorizontalAlignment="{TemplateBinding ay:UIBase.PlaceholderHorizontalAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding ay:UIBase.PlaceholderMargin}" Visibility="Collapsed" 
                                              ContentTemplate="{Binding PlaceholderTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultPlaceholderTemplate}}" />
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeepPlaceholder" Value="False" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeepPlaceholder" Value="True" />
                                <Condition Property="TextBox.Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                            <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ay:TokenTextBoxItem}" TargetType="{x:Type ay:TokenTextBoxItem}">
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:TokenTextBoxItem}">
                    <Border Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Bd" Value="{StaticResource colorprimary}" Property="Background" />
                            <Setter Value="{StaticResource colorwhite}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ay:TokenItem}" TargetType="{x:Type ay:TokenItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="VerticalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ay:TokenTextBox}}, Path=VerticalContentAlignment}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ay:TokenTextBox}}, Path=HorizontalContentAlignment}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:TokenItem}">
                    <Border Name="Bd" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TokenTextBoxTemplate" TargetType="{x:Type ay:TokenTextBox}">
        <Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Unfocused">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" >
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <RichTextBox Name="PART_RichTextBox" Background="{TemplateBinding Background}" BorderBrush="Transparent" 
                         BorderThickness="0" Foreground="{TemplateBinding Foreground}" Cursor="Hand"
                         CaretBrush="{TemplateBinding Foreground}" AllowDrop="False"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                         HorizontalAlignment="{TemplateBinding VerticalContentAlignment}"  SelectionBrush="{TemplateBinding SelectionBrush}"
                         ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" 
                         ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                         Padding="10,8" MinWidth="{TemplateBinding FrameworkElement.MinWidth}" 
                         MinHeight="{TemplateBinding FrameworkElement.MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" 
                         MaxHeight="{TemplateBinding FrameworkElement.MaxHeight}" AutomationProperties.Name="RichTextBox" />
            <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
            </Border>
            <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
            </Border>
            <Popup Name="PART_Popup" AllowsTransparency="True"  Placement="Relative" VerticalOffset="{TemplateBinding ActualHeight,Converter={MathConverter},ConverterParameter=x+1}" StaysOpen="False" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Border Name="DropDownBorder" BorderThickness="1" BorderBrush="{StaticResource bordercolorbase}" Background="{StaticResource colorwhite}"  
                        MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <ay:TokenTextBoxCoreItemsControl x:Name="PART_CoreItemsControl" ItemsSource="{TemplateBinding ay:TokenTextBox.FilteredItems}" 
                                                     HighlightedItem="{TemplateBinding ay:TokenTextBox.HighlightedItem}" 
                                                     DisplayMemberPath="{TemplateBinding ItemsControl.DisplayMemberPath}" 
                                                     ItemContainerStyle="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                                     ItemTemplate="{TemplateBinding ItemsControl.ItemTemplate}" 
                                                     FontFamily="{TemplateBinding FontFamily}" 
                                                     FontSize="{TemplateBinding FontSize}" 
                                                     FontStretch="{TemplateBinding FontStretch}" 
                                                     FontStyle="{TemplateBinding FontStyle}" 
                                                     FontWeight="{TemplateBinding FontWeight}" 
                                                     HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                     VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                     Padding="{TemplateBinding Padding}" 
                                                     IsTabStop="{TemplateBinding IsTabStop}" 
                                                     BorderBrush="{TemplateBinding BorderBrush}"
                                                     BorderThickness="{TemplateBinding BorderThickness}"
                                                     Background="{TemplateBinding Background}"
                                                     MinWidth="{TemplateBinding MinWidth}" 
                                                     MinHeight="{TemplateBinding MinHeight}"
                                                     Foreground="{TemplateBinding Foreground}" VirtualizingStackPanel.IsVirtualizing="True">
                        <ay:TokenTextBoxCoreItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </ay:TokenTextBoxCoreItemsControl.ItemsPanel>
                        <ay:TokenTextBoxCoreItemsControl.Template>
                            <ControlTemplate>
                                <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True" AutomationProperties.AutomationId="TokenTextBoxScrollViewer" AutomationProperties.Name="TokenTextBoxScrollViewer">
                                    <Grid>
                                        <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle Name="OpaqueRect" Height="{Binding ElementName=DropDownBorder, Path=ActualHeight}" Width="{Binding ElementName=DropDownBorder, Path=ActualWidth}" Fill="{Binding ElementName=DropDownBorder, Path=Background}" />
                                        </Canvas>
                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </ControlTemplate>
                        </ay:TokenTextBoxCoreItemsControl.Template>
                    </ay:TokenTextBoxCoreItemsControl>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_RichTextBox" Property="IsKeyboardFocused" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{StaticResource colorprimary.color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{StaticResource bordercolorbase.color}" >
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
                <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">

                <Setter TargetName="PART_RichTextBox" Value="{Binding ElementName=PART_RichTextBox}" Property="FocusManager.FocusedElement" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                <Setter Value="No" Property="Cursor" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <DataTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ay:TokenTextBox}, ResourceId=DefaultTokenItemTemplate}">
        <ay:AyText  Text="{Binding}"  Margin="0,4">
            <TextBlock.TextDecorations>
                <TextDecorationCollection>
                    <TextDecoration PenOffset="0.3" PenOffsetUnit="FontRenderingEmSize" />
                </TextDecorationCollection>
            </TextBlock.TextDecorations>
        </ay:AyText>
    </DataTemplate>
    <Style x:Key="TokenTextBoxStyle" TargetType="{x:Type ay:TokenTextBox}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="TokenDelimiter" Value=";" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SelectionBrush" Value="{StaticResource colorprimary}" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="Width" Value="180" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template" Value="{StaticResource TokenTextBoxTemplate}" />
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border IsHitTestVisible="False" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource colorprimary}"  BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource colorwhite}"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
    </Style>



    <Style x:Key="AyFormInputStyle" TargetType="{x:Type ay:AyFormInput}" BasedOn="{StaticResource ayTextBox}">
        <Style.Resources>
            <ControlTemplate x:Key="SingleLine" TargetType="{x:Type ay:AyFormInput}">
                <Grid x:Name="PART_ROOT">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Unfocused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid Background="{TemplateBinding Background}" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <ContentPresenter Grid.Column="0"
                                            x:Name="leftcp" 
                                            Content="{TemplateBinding LeftContent}" />
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <RepeatButton Height="auto"  BorderThickness="0,0,1,0"  ay:UIBase.CornerRadius="4,0,0,4" ay:UIBase.Icon="{TemplateBinding NumberBoxSpinMinus}"  x:Name="PART_MinusRepeatButton" Style="{StaticResource RepeatButton.AyFormInput.Icon}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" Content="{TemplateBinding NumberBoxSpinMinus}" Width="{TemplateBinding NumberBoxSpinWidth}"/>
                            <Border x:Name="highlightBd" Grid.Column="1"                 
                                                HorizontalAlignment="Stretch" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" 
                                                VerticalAlignment="Stretch"
                                                Background="Transparent"></Border>
                            <ContentPresenter x:Name="rightcp"
                                                          Grid.Column="2" 
                                                          Content="{TemplateBinding RightContent}" />
                            <ScrollViewer      x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" 
                                                          VerticalAlignment="Stretch" AutomationProperties.Name="ScrollViewer" 
                                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          Grid.Column="1" />
                            <ContentPresenter Name="PART_PlaceholderHost" Content="{TemplateBinding Placeholder}" VerticalAlignment="{TemplateBinding ay:UIBase.PlaceholderVerticalAlignment}" 
                                                  HorizontalAlignment="{TemplateBinding ay:UIBase.PlaceholderHorizontalAlignment}" IsHitTestVisible="False" Visibility="Collapsed" Margin="{TemplateBinding ay:UIBase.PlaceholderMargin}" Grid.Column="1"
                                                  ContentTemplate="{Binding PlaceholderTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultPlaceholderTemplate}}" />
                        </Grid>
                        <RepeatButton Height="auto" BorderThickness="1,0,0,0" ay:UIBase.CornerRadius="0,4,4,0" ay:UIBase.Icon="{TemplateBinding NumberBoxSpinAdd}"   x:Name="PART_PlusRepeatButton"  Style="{StaticResource RepeatButton.AyFormInput.Icon}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="2"  Visibility="Collapsed" Content="{TemplateBinding NumberBoxSpinAdd}" Width="{TemplateBinding NumberBoxSpinWidth}"/>

                    </Grid>
                    <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="True">
                    </Border>
                    <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                    </Border>

                </Grid>
                <ControlTemplate.Triggers>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsShowAddMinusButton" Value="true" />
                            <Condition Property="IsNumberBox" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_MinusRepeatButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_PlusRepeatButton" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsShowAddMinusButton" Value="true" />
                            <Condition Property="IsIntegerBox" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_MinusRepeatButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_PlusRepeatButton" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="False" />
                            <Condition Property="IsFocused" Value="False" />
                            <Condition Property="Text" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="True" />
                            <Condition Property="TextBox.Text" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />

                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="None" Property="Cursor" />

                    </Trigger>
                    <Trigger Property="IsHighlight"
                                 Value="true">
                        <Setter Property="Background"
                                    Value="{StaticResource colorprimary2}"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                    <Trigger Property="IsShowAddMinusButton"
                                 Value="true">
                        <Setter Property="CornerRadius"
                                    Value="0"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="MultiLine" TargetType="{x:Type ay:AyFormInput}">
                <Grid x:Name="PART_ROOT">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Unfocused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <Grid Background="{TemplateBinding Background}" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0"
                                            x:Name="leftcp" 
                                            Content="{TemplateBinding LeftContent}" />
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <RepeatButton BorderThickness="0,0,1,0"  ay:UIBase.CornerRadius="4,0,0,4" ay:UIBase.Icon="{TemplateBinding NumberBoxSpinMinus}"  x:Name="PART_MinusRepeatButton" Style="{StaticResource RepeatButton.AyFormInput.Icon}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" Content="{TemplateBinding NumberBoxSpinMinus}" Width="{TemplateBinding NumberBoxSpinWidth}"/>
                            <Border x:Name="highlightBd" Grid.Column="1"                 
                                                HorizontalAlignment="Stretch" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" 
                                                VerticalAlignment="Stretch"
                                                Background="Transparent"></Border>
                            <RepeatButton   BorderThickness="1,0,0,0" ay:UIBase.CornerRadius="0,4,4,0" ay:UIBase.Icon="{TemplateBinding NumberBoxSpinAdd}"   x:Name="PART_PlusRepeatButton"  Style="{StaticResource RepeatButton.AyFormInput.Icon}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="2"  Visibility="Collapsed" Content="{TemplateBinding NumberBoxSpinAdd}" Width="{TemplateBinding NumberBoxSpinWidth}"/>
                            <ScrollViewer      x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" 
                                                          VerticalAlignment="Stretch" AutomationProperties.Name="ScrollViewer" 
                                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          Grid.Column="1" />
                            <ContentPresenter Name="PART_PlaceholderHost" Content="{TemplateBinding Placeholder}" VerticalAlignment="{TemplateBinding ay:UIBase.PlaceholderVerticalAlignment}" 
                                                  HorizontalAlignment="{TemplateBinding ay:UIBase.PlaceholderHorizontalAlignment}" IsHitTestVisible="False" Visibility="Collapsed" Margin="{TemplateBinding ay:UIBase.PlaceholderMargin}" Grid.Column="1"
                                                  ContentTemplate="{Binding PlaceholderTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultWrapPlaceholderTemplate}}" />
                        </Grid>

                        <ContentPresenter x:Name="rightcp"
                                                          Grid.Column="2" 
                                                          Content="{TemplateBinding RightContent}" />
                    </Grid>
                    <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="True">
                    </Border>
                    <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                    </Border>

                </Grid>
                <ControlTemplate.Triggers>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsShowAddMinusButton" Value="true" />
                            <Condition Property="IsNumberBox" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_MinusRepeatButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_PlusRepeatButton" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsShowAddMinusButton" Value="true" />
                            <Condition Property="IsIntegerBox" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_MinusRepeatButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_PlusRepeatButton" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="False" />
                            <Condition Property="IsFocused" Value="False" />
                            <Condition Property="Text" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="True" />
                            <Condition Property="TextBox.Text" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />

                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <Trigger Property="IsHighlight"
                                 Value="true">
                        <Setter Property="Background"
                                    Value="{StaticResource colorprimary2}"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                    <Trigger Property="IsShowAddMinusButton"
                                 Value="true">
                        <Setter Property="CornerRadius"
                                    Value="0"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border IsHitTestVisible="False" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource colorprimary}"  BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AyToolTipForeground"
                Value="{StaticResource colorprimary}" />
        <Setter Property="AyToolTipBackground"
                Value="{StaticResource colorprimary2}" />
        <Setter Property="AyToolTipBorderBrush"
                Value="{StaticResource colorprimary5}" />
        <Setter Property="ay:UIBase.PlaceholderMargin"
                Value="16,0,0,0" />
        <Setter Property="TextBlock.LineHeight" Value="auto"/>
        <Setter Property="Template" Value="{StaticResource SingleLine}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMultiply" Value="true">
                <Setter Property="AcceptsReturn" Value="True"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="ay:UIBase.PlaceholderVerticalAlignment" Value="Top"/>
                <Setter Property="Padding" Value="6"/>
                <Setter Property="ay:UIBase.PlaceholderMargin"
                Value="16,12,12,12" />
                <Setter Property="TextBlock.LineHeight" Value="{StaticResource NormalFontSize}"/>
                <Setter Property="Template" Value="{StaticResource MultiLine}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="20,0" />
        <Setter Property="Height" Value="34" />
        <Setter Property="Margin" Value="1,0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1"  Value="{Binding Source={StaticResource backgroundcolorbase},Path=Color}" >

                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected" >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="BdSelected" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1" Value="{Binding Source={StaticResource backgroundcolorbase},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="itemContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="itemContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colortextregular},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bd"
                            Background="{StaticResource colorwhite}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true" UseLayoutRounding="True"/>

                        <Border x:Name="BdSelected"
                            Background="{StaticResource backgroundcolorbase}"
                            BorderBrush="Transparent" Visibility="Collapsed"
                            BorderThickness="0"
                            SnapsToDevicePixels="true" UseLayoutRounding="True"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="itemContent" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="BdSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="itemContent" Property="TextElement.FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource backgroundcolorbase}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Padding="6,0"
                        Background="Transparent"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <Grid>
                            <Path
                                x:Name="arrow"
                                Width="12"
                                Margin="0,0,6,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Data="{StaticResource AyComboArrow}"
                                Fill="{StaticResource colortextplaceholder}"
                                RenderTransformOrigin="0.5,0.5"
                                Stretch="Uniform">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                    GeneratedDuration="0:0:0.1"
                                    From="Normal"
                                    To="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">

                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary4},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="-180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource CommonControlStyle}">

        <Style.Resources>
            <ControlTemplate x:Key="AyComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="Storyboard_Open">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="Storyboard_Close">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Unfocused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>

                    <ToggleButton x:Name="ToggleButton" ClickMode="Press"
                                               Focusable="False" Style="{StaticResource ComboBoxToggleButton}"
                                               IsChecked="{Binding Path=IsDropDownOpen,
                                                                   RelativeSource={RelativeSource TemplatedParent},
                                                                   Mode=TwoWay}"
                                               />
                    <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False" />


                    <ay:AyTextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch"   Width="auto"  
                                      VerticalAlignment="Center" Background="{TemplateBinding Background}" Focusable="True" IsReadOnly="False" ay:UIBase.CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}"
                                     Visibility="Hidden" Text="{TemplateBinding ComboBox.SelectionBoxItem}">
                    </ay:AyTextBox>

                    <Popup Name="Popup"
                                   MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                   MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"    
                                   Placement="Bottom" StaysOpen="False" VerticalOffset="1">
                        <Grid Name="DropDown"      MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                      Margin="24,0,24,24"
                                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Grid.RenderTransform>

                            <Border Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                                </Border.Effect>
                            </Border>
                            <Border  Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}"
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            <ScrollViewer Padding="0,8" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>

                        </Grid>
                    </Popup>

                    <Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">

                    </Border>
                    <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">

                    </Border>

                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>

                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="True">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Open_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Open_BeginStoryboard" Storyboard="{StaticResource Storyboard_Open}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="False">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Close_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Close_BeginStoryboard" Storyboard="{StaticResource Storyboard_Close}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="ItemsControl.HasItems" Value="False">
                        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="100" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <Trigger Property="ItemsControl.IsGrouping" Value="True">
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </Trigger>
                    <Trigger Property="ComboBox.IsEditable" Value="True">
                        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
                        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="AyEditComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="Storyboard_Open">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="Storyboard_Close">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid>



                    <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False" />


                    <ay:AyTextBox  FocusVisualStyle="{x:Null}" Cursor="IBeam" Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch"  Width="auto"  
                                      VerticalAlignment="Center" Background="{TemplateBinding Background}" Focusable="True" IsReadOnly="False" ay:UIBase.CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}"
                                     Visibility="Hidden" Text="{TemplateBinding ComboBox.SelectionBoxItem}">
                    </ay:AyTextBox>
                    <ToggleButton x:Name="ToggleButton" ClickMode="Press" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="34"
                                               Focusable="False" Style="{StaticResource ComboBoxToggleButton}" Margin="2" 
                                               IsChecked="{Binding Path=IsDropDownOpen,
                                                                   RelativeSource={RelativeSource TemplatedParent},
                                                                   Mode=TwoWay}"
                                               />
                    <Popup Name="Popup"
                                   MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                   MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" StaysOpen="False" VerticalOffset="1">
                        <Grid Name="DropDown"      MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                      Margin="24,0,24,24"
                                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Grid.RenderTransform>

                            <Border Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                                </Border.Effect>
                            </Border>
                            <Border  Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}"
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                            <ScrollViewer Padding="0,8" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>

                        </Grid>
                    </Popup>

                    <!--<Border x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">

                    </Border>
                    <Border Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">

                    </Border>-->

                </Grid>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                    </Trigger>-->
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>

                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="True">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Open_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Open_BeginStoryboard" Storyboard="{StaticResource Storyboard_Open}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="False">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Close_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Close_BeginStoryboard" Storyboard="{StaticResource Storyboard_Close}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="ItemsControl.HasItems" Value="False">
                        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="100" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <Trigger Property="ItemsControl.IsGrouping" Value="True">
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </Trigger>
                    <Trigger Property="ComboBox.IsEditable" Value="True">
                        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
                        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource colorwhite}"/>
        <Setter Property="Padding" Value="12,0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="180"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="Validation.ErrorTemplate"  Value="{x:Null}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource AyComboBoxTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource AyEditComboBoxTemplate}" />
                <Setter Property="Padding" Value="4,0,18,0"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource AyComboBoxTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AyComboBoxStyle" TargetType="{x:Type ay:AyComboBox}" BasedOn="{StaticResource CommonControlStyle}">
        <Style.Resources>
            <ControlTemplate x:Key="AyComboBoxTemplate" TargetType="{x:Type ay:AyComboBox}">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="Storyboard_Open">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="Storyboard_Close">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid x:Name="PART_ROOT" Background="{TemplateBinding Background}">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Unfocused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="0"
                                            x:Name="leftcp" 
                                            Content="{TemplateBinding LeftContent}" />
                    <Grid Grid.Column="1" x:Name="tes">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="22" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="highlightBd"                Grid.ColumnSpan="2"
                                                HorizontalAlignment="Stretch" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" 
                                                VerticalAlignment="Stretch"
                                                Background="Transparent"></Border>
                        <ToggleButton x:Name="ToggleButton" ClickMode="Press" Grid.ColumnSpan="2"
                                               Focusable="False" Style="{StaticResource ComboBoxToggleButton}"
                                               IsChecked="{Binding Path=IsDropDownOpen,
                                                                   RelativeSource={RelativeSource TemplatedParent},
                                                                   Mode=TwoWay}"
                                               />
                        <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="0"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False" />


                        <ay:AyTextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch"  Width="auto"  
                                      VerticalAlignment="Center" Background="{TemplateBinding Background}" Focusable="True" IsReadOnly="False" ay:UIBase.CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}"
                                     Visibility="Hidden" Text="{TemplateBinding ComboBox.SelectionBoxItem}">
                        </ay:AyTextBox>

                        <Popup Name="PART_Popup"
                           MinWidth="{Binding ActualWidth,ElementName=tes}"
                                   MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" StaysOpen="False" VerticalOffset="1">

                            <Grid Name="DropDown"      MinWidth="{Binding ActualWidth,ElementName=tes}"
                                      Margin="24,0,24,24"
                                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Grid.RenderTransform>

                                <Border Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.Effect>
                                        <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                                    </Border.Effect>
                                </Border>
                                <Border  Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}"
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                                <ScrollViewer Padding="0,8" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>

                            </Grid>
                        </Popup>

                    </Grid>
                    <ContentPresenter x:Name="rightcp"
                                                          Grid.Column="2" 
                                                          Content="{TemplateBinding RightContent}" />
                    <ContentPresenter Name="PART_PlaceholderHost" Content="{TemplateBinding Placeholder}" VerticalAlignment="{TemplateBinding ay:UIBase.PlaceholderVerticalAlignment}" 
                                                  HorizontalAlignment="{TemplateBinding ay:UIBase.PlaceholderHorizontalAlignment}" IsHitTestVisible="False" Visibility="Collapsed" Margin="{TemplateBinding ay:UIBase.PlaceholderMargin}" Grid.Column="1"
                                                  ContentTemplate="{Binding PlaceholderTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultPlaceholderTemplate}}" />
                    <Border Grid.ColumnSpan="3" x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="True">
                    </Border>
                    <Border Grid.ColumnSpan="3" Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger Property="IsHighlight"
                                 Value="true">
                        <Setter Property="Background"
                                    Value="{StaticResource colorprimary2}"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="False" />
                            <Condition Property="IsFocused" Value="False" />
                            <Condition Property="SelectionBoxItem" Value="{x:Null}" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="True" />
                            <Condition Property="Text" SourceName="PART_EditableTextBox" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="True">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Open_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Open_BeginStoryboard" Storyboard="{StaticResource Storyboard_Open}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="False">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Close_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Close_BeginStoryboard" Storyboard="{StaticResource Storyboard_Close}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="ItemsControl.HasItems" Value="False">
                        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="100" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <Trigger Property="ItemsControl.IsGrouping" Value="True">
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </Trigger>
                    <Trigger Property="ComboBox.IsEditable" Value="True">
                        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
                        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="AyEditComboBoxTemplate" TargetType="{x:Type ay:AyComboBox}">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="Storyboard_Open">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="Storyboard_Close">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" >

                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid x:Name="PART_ROOT" Background="{TemplateBinding Background}">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="FocusStates">
                            <VisualState x:Name="Unfocused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2"  Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Focused">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="borderFocus" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource bordercolorbase},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="MouseOver">
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                        <EasingColorKeyFrame  KeyTime="0:0:0.2" Value="{Binding Source={StaticResource colortextplaceholder},Path=Color}" >
                                        </EasingColorKeyFrame>
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="0"
                                            x:Name="leftcp" 
                                            Content="{TemplateBinding LeftContent}" />
                    <Grid Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="tes">

                        <Border x:Name="highlightBd"                
                                                HorizontalAlignment="Stretch" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" 
                                                VerticalAlignment="Stretch"
                                                Background="Transparent"></Border>

                        <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False" />

                        <ay:AyTextBox BorderThickness="0"  FocusVisualStyle="{x:Null}" Cursor="IBeam" Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" 
                                      VerticalAlignment="Center" Background="Transparent" Focusable="True"  Width="auto"  IsReadOnly="False" ay:UIBase.CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}"
                                     Visibility="Hidden" Text="{TemplateBinding ComboBox.SelectionBoxItem}">
                        </ay:AyTextBox>
                        <ToggleButton x:Name="ToggleButton" ClickMode="Press" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="34"
                                               Focusable="False" Style="{StaticResource ComboBoxToggleButton}" Margin="2" 
                                               IsChecked="{Binding Path=IsDropDownOpen,
                                                                   RelativeSource={RelativeSource TemplatedParent},
                                                                   Mode=TwoWay}"/>

                        <Popup Name="PART_Popup"
                           MinWidth="{Binding ActualWidth,ElementName=tes}"
                                   MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" StaysOpen="False" VerticalOffset="1">

                            <Grid Name="DropDown"      MinWidth="{Binding ActualWidth,ElementName=tes}"
                                      Margin="24,0,24,24"
                                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Grid.RenderTransform>

                                <Border Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                    <Border.Effect>
                                        <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                                    </Border.Effect>
                                </Border>
                                <Border  Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}"
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
                                <ScrollViewer Padding="0,8" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>

                            </Grid>
                        </Popup>

                    </Grid>
                    <ContentPresenter x:Name="rightcp"
                                                          Grid.Column="2" 
                                                          Content="{TemplateBinding RightContent}" />
                    <ContentPresenter Name="PART_PlaceholderHost" Content="{TemplateBinding Placeholder}" VerticalAlignment="{TemplateBinding ay:UIBase.PlaceholderVerticalAlignment}" 
                                                  HorizontalAlignment="{TemplateBinding ay:UIBase.PlaceholderHorizontalAlignment}" IsHitTestVisible="False" Visibility="Collapsed" Margin="{TemplateBinding ay:UIBase.PlaceholderMargin}" Grid.Column="1"
                                                  ContentTemplate="{Binding PlaceholderTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultPlaceholderTemplate}}" />
                    <Border Grid.ColumnSpan="3" x:Name="border" Visibility="Visible" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="True">
                    </Border>
                    <Border Grid.ColumnSpan="3" Visibility="Collapsed" x:Name="borderFocus" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" BorderBrush="{StaticResource bordercolorbase}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="True">
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger Property="IsKeyboardFocused" Value="true" SourceName="PART_EditableTextBox">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                    </Trigger>
                    <Trigger Property="IsHighlight"
                                 Value="true">
                        <Setter Property="Background"
                                    Value="{StaticResource colorprimary2}"
                                    TargetName="highlightBd"></Setter>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="true">
                        <Setter TargetName="border" Value="Collapsed" Property="Visibility" />
                        <Setter TargetName="borderFocus" Value="Visible" Property="Visibility" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="False" />
                            <Condition Property="IsFocused" Value="False" />
                            <Condition Property="SelectionBoxItem" Value="{x:Null}" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeepPlaceholder" Value="True" />
                            <Condition Property="Text" SourceName="PART_EditableTextBox" Value="" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter TargetName="PART_PlaceholderHost" Property="Visibility" Value="Visible" />
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="True">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Open_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Open_BeginStoryboard" Storyboard="{StaticResource Storyboard_Open}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger SourceName="ToggleButton" Property="IsChecked" Value="False">
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="Storyboard_Close_BeginStoryboard" />
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="Storyboard_Close_BeginStoryboard" Storyboard="{StaticResource Storyboard_Close}" />
                        </Trigger.EnterActions>
                    </Trigger>
                    <Trigger Property="ItemsControl.HasItems" Value="False">
                        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="100" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                        <Setter Value="No" Property="Cursor" />
                    </Trigger>
                    <Trigger Property="ItemsControl.IsGrouping" Value="True">
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                    </Trigger>
                    <Trigger Property="ComboBox.IsEditable" Value="True">
                        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
                        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource colorwhite}"/>
        <Setter Property="AyToolTipForeground"
                Value="{StaticResource colorprimary}" />
        <Setter Property="AyToolTipBackground"
                Value="{StaticResource colorprimary2}" />
        <Setter Property="AyToolTipBorderBrush"
                Value="{StaticResource colorprimary5}" />
        <Setter Property="Padding" Value="12,0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="180"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="Validation.ErrorTemplate"  Value="{x:Null}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource AyComboBoxTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource AyEditComboBoxTemplate}" />
                <Setter Property="Padding" Value="4,0,18,0"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource AyComboBoxTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--日期-->
    <Style x:Key="AyDateBoxCalendar.Button" TargetType="{x:Type Button}" BasedOn="{StaticResource ayButton}">
        <Setter Property="ay:UIBase.CornerRadius" Value="0" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1"  Value="{Binding Source={StaticResource backgroundcolorbase},Path=Color}" >

                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="itemContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bd"
                            Background="{StaticResource colorwhite}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true" UseLayoutRounding="True"/>

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="itemContent" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyDateBoxCalendar.DayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource AyDateBoxCalendar.Button}">
        <Setter Property="Padding" Value="14,10" />
        <Setter Property="ay:UIBase.CornerRadius" Value="0" />
        <!--<Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />-->
    </Style>
    <Style x:Key="AyDateBoxCalendar.Icon" TargetType="{x:Type Button}" BasedOn="{StaticResource Button.Default}">
        <Setter Property="ay:UIBase.Icon" Value="more_singleleft" />
        <Setter Property="ay:UIBase.IconWidth" Value="14" />
        <Setter Property="ay:UIBase.IconHeight" Value="14" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1"  Value="{Binding Source={StaticResource backgroundcolorbase},Path=Color}" >

                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bd"
                            Background="{StaticResource colorwhite}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true" UseLayoutRounding="True"/>

                        <ay:AyIconAll Icon="{TemplateBinding ay:UIBase.Icon}"
                                      Width="{TemplateBinding ay:UIBase.IconWidth}"
                                      Height="{TemplateBinding ay:UIBase.IconHeight}" 
                                      Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                      Margin="{TemplateBinding Control.Padding}" 
                                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"  >
                            <ay:AyIconAll.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </ay:AyIconAll.Foreground>
                        </ay:AyIconAll>
                    </Grid>




                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AyPopupContentAdornerStyle" TargetType="{x:Type ay:AyPopupContentAdorner}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="auto" />
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="1,8" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyPopupContentAdorner}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Storyboard_Open">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" >

                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Storyboard_Close">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DropDown" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" >

                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <!--<Popup Name="PART_Popup" Width="400" Height="500"
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsOpen}"    PlacementTarget="{TemplateBinding PlacementTarget}"
                                   Placement="Bottom" StaysOpen="True" VerticalOffset="1">-->
                    <Grid Name="DropDown"      
                                      Margin="24,0,24,24"
                              MaxHeight="1000" 
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>

                        <Border  Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" IsHitTestVisible="False">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                            </Border.Effect>
                        </Border>
                        <Border Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}" 
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" IsHitTestVisible="False"/>
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                          RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <!--</Popup>-->

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="True">
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Storyboard_Open_BeginStoryboard" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Storyboard_Open_BeginStoryboard" Storyboard="{StaticResource Storyboard_Open}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsOpen" Value="False">
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Storyboard_Close_BeginStoryboard" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Storyboard_Close_BeginStoryboard" Storyboard="{StaticResource Storyboard_Close}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyPopupContentAdornerStyle1" TargetType="{x:Type ay:AyPopupContentAdorner}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ay:UIBase.CornerRadius" Value="4" />
        <Setter Property="BorderBrush" Value="{StaticResource bordercolorbase}" />
        <Setter Property="Background" Value="{StaticResource backgroundcolorbase}" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="auto" />
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="1,4" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="true" />
        <Setter Property="Control.Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyPopupContentAdorner}">


                    <Grid Name="DropDown"      
                                      Margin="24,0,24,24"
                              MaxHeight="1000" 
                                       RenderTransformOrigin="0.5,0" SnapsToDevicePixels="True">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>

                        <Border  Background="{StaticResource colorwhite}" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" IsHitTestVisible="False">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
                            </Border.Effect>
                        </Border>
                        <Border Name="DropDownBorder" Background="{StaticResource colorwhite}"
                                            BorderBrush="{StaticResource bordercolorlight}" IsHitTestVisible="False"
                                            BorderThickness="1" CornerRadius="{TemplateBinding ay:UIBase.CornerRadius}" />
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                          RecognizesAccessKey="True" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <!--</Popup>-->

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyDateBoxYearStyle" TargetType="{x:Type ay:AyDateBoxYear}" BasedOn="{StaticResource AyFormInputStyle}">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AyDateBoxMonthStyle" TargetType="{x:Type ay:AyDateBoxMonth}" BasedOn="{StaticResource AyFormInputStyle}" >
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="AyDateBoxDayStyle" TargetType="{x:Type ay:AyDateBoxDay}" BasedOn="{StaticResource AyFormInputStyle}" >
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AyDateBoxHourStyle" TargetType="{x:Type ay:AyDateBoxHour}" BasedOn="{StaticResource AyFormInputStyle}"  >
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AyDateBoxMinuteStyle" TargetType="{x:Type ay:AyDateBoxMinute}" BasedOn="{StaticResource AyFormInputStyle}"  >
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AyDateBoxSecondStyle" TargetType="{x:Type ay:AyDateBoxSecond}" BasedOn="{StaticResource AyFormInputStyle}"  >
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>




    <!--AyTableView-->
    <Style x:Key="AjustColumnWidthThumb" TargetType="{x:Type ay:AyTableViewHeaderThumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTableViewHeaderThumb}">
                    <Border BorderThickness="0,0,1,0" Background="Transparent" Width="{TemplateBinding Width}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                            Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Header Presenter Style-->
    <Style x:Key="headerPresenterStyle"
         TargetType="{x:Type ay:AyTableViewHeaderPresenter}">
        <Setter Property="Focusable"
            Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ay:AyTableViewHeaderPanel x:Name="PART_HeaderPanel"
                                   SnapsToDevicePixels="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewHeaderPresenter">
                    <Border BorderThickness="0,0,0,1" BorderBrush="{Binding HeaderResizeBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor},Mode=TwoWay}">
                        <ScrollViewer CanContentScroll="True"
                        x:Name="sv" 
                        Focusable="False" 
                        Padding="0"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="headerSubPresenterStyle"
         TargetType="{x:Type ay:AyTableViewHeaderPresenter}">
        <Setter Property="Focusable"
            Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ay:AyTableViewHeaderSubPanel x:Name="PART_HeaderPanel"
                                   SnapsToDevicePixels="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewHeaderPresenter">
                    <!--<Border BorderThickness="0,0,0,1" BorderBrush="{Binding  HeaderResizeBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                        <ScrollViewer CanContentScroll="True"
                        x:Name="sv" 
                        Focusable="False" 
                        Padding="0"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden">-->
                    <ItemsPresenter />
                    <!--</ScrollViewer>
                    </Border>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="columnSubHeaderStyle"
         TargetType="{x:Type ay:AyTableViewColumnHeader}">
        <Setter Property="FontWeight" Value="{Binding HeadFontWeight,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="Focusable"
            Value="False" />
        <Setter Property="Width"
            Value="{Binding Width,Mode=TwoWay}" />
        <Setter Property="SnapsToDevicePixels"
            Value="True" />
        <Setter Property="Foreground"
            Value="{Binding HeaderStaticForeground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="FontSize"
            Value="{Binding HeaderFontSize,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="FontFamily"
            Value="{Binding HeaderFontFamily,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTableViewColumnHeader}">
                    <Border Grid.Row="0" VerticalAlignment="Top" BorderThickness="0,0,1,1" HorizontalAlignment="Stretch" Height="{TemplateBinding ColumnHeight}"  Background="{x:Null}"
                             BorderBrush="{Binding  HeaderResizeBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                        <ContentPresenter  ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"      ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{Binding GroupName}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsGroup" Value="false">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ay:AyTableViewColumnHeader}">
                            <Grid Background="{x:Null}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="{TemplateBinding Width}">
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="DefaultHeadTemplate">
        <ay:AyText Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor},Path=Foreground}" FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor},Path=FontSize}"  Focusable="False" Text="{Binding}" VerticalAlignment="Center"/>
    </DataTemplate>

    <Style x:Key="columnHeaderStyle"
         TargetType="{x:Type ay:AyTableViewColumnHeader}" >
        <Setter Property="FontWeight" Value="{Binding HeadFontWeight,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="Focusable"
            Value="False" />
        <Setter Property="Width"
            Value="{Binding Width,Mode=TwoWay}" />
        <Setter Property="SnapsToDevicePixels"
            Value="True" />
        <Setter Property="Foreground"
            Value="{Binding HeaderStaticForeground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="BorderBrush"
            Value="{Binding HeaderResizeBorderBrush,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="FontSize"
            Value="{Binding HeaderFontSize,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="FontFamily"
            Value="{Binding HeaderFontFamily,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTableViewColumnHeader}">

                    <Grid x:Name="header" Height="{TemplateBinding ColumnHeight}" VerticalAlignment="Bottom">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="AUTO" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Column="0"  Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding ContentMargin}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter  ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              Content="{Binding Title}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"></ContentPresenter>

                            <Viewbox x:Name="vbOrder" Visibility="Collapsed" Width="16" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.8">
                                <Canvas x:Name="Order" HorizontalAlignment="Left" Height="792" SnapsToDevicePixels="True" VerticalAlignment="Top" Width="612">
                                    <Canvas x:Name="Order_1" Height="479.23" Canvas.Left="156" Canvas.Top="157" Width="299.008">
                                        <Path x:Name="up" Data="F1M156,337.223L455.008,337.223L303.457,157z" Fill="{Binding HeaderStaticForeground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" Height="180.223" Canvas.Left="0" Stretch="Fill" Canvas.Top="0" Width="299.008"/>
                                        <Path x:Name="down" Data="F1M450.91,456.008L156,456.008L303.457,636.23z" Fill="{Binding HeaderStaticForeground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" Height="180.222" Canvas.Left="0" Stretch="Fill" Canvas.Top="299.008" Width="294.91"/>
                                    </Canvas>
                                </Canvas>
                            </Viewbox>
                        </StackPanel>


                        <ay:AyTableViewHeaderThumb  Grid.Column="1"  BorderBrush="{TemplateBinding BorderBrush}"
                                     Width="2" x:Name="thumbResizeColumn" IsEnabled="true"
                                     HorizontalAlignment="Right" Style="{DynamicResource AjustColumnWidthThumb}"
                                     Cursor="SizeWE">
                        </ay:AyTableViewHeaderThumb>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Up}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >


                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Down}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >
                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.No}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >
                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsPressed,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Up}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >
                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsPressed,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Down}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >
                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsPressed,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.No}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="header"
                      Property="Background" Value="{Binding HeaderHoverBackground,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}"
                       >
                            </Setter>
                            <Setter TargetName="vbOrder"
                      Property="Opacity"
                      Value="1" />
                        </MultiDataTrigger>


                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Up}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="vbOrder"
                      Property="Visibility"
                      Value="Visible" />
                            <Setter TargetName="up"
                      Property="Fill"
                            Value="{Binding HeaderSortActive,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.Down}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="vbOrder"
                      Property="Visibility"
                      Value="Visible" />
                            <Setter TargetName="down"
                      Property="Fill"
                      Value="{Binding HeaderSortActive,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTableView}}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding OrderBySupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding SortDirection}" Value="{x:Static ay:AyTableViewColumn+ColumnSortDirection.No}"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="vbOrder"
                      Property="Visibility"
                      Value="Visible" />
                        </MultiDataTrigger>
                        <Trigger Property="ResizeColumn" Value="false">
                            <Setter TargetName="thumbResizeColumn" Property="IsEnabled" Value="false"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsGroup" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ay:AyTableViewColumnHeader}">
                            <Grid Background="Transparent"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition  />
                                </Grid.RowDefinitions>

                                <ContentPresenter  ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              Content="{Binding GroupName}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              ContentTemplate="{TemplateBinding ContentTemplate}" />

                                <Border Grid.Row="0" BorderThickness="0,0,1,1" Width="2"  Height="{TemplateBinding ColumnHeight}" HorizontalAlignment="Right"   Background="Transparent"
                                VerticalAlignment="Stretch"
                             BorderBrush="{Binding  HeaderResizeBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                                </Border>
                                <Grid Grid.Row="1">

                                    <ay:AyTableViewHeaderPresenter Grid.Row="0"   Height="{TemplateBinding ColumnHeight}"
                                         x:Name="PART_HeaderPresenter"    
                                         ItemContainerStyle="{StaticResource columnHeaderStyle1}"
                                        ItemsSource="{TemplateBinding Columns}"
                                         Style="{StaticResource headerPresenterStyle1}" />
                                    
                      
                                    
                                    -->
        <!--<ContentPresenter  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                              Content="{TemplateBinding StackItems}" />-->
        <!--
                                </Grid>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <!--ContentStringFormat="{TemplateBinding CellContentStringFormat}"-->
    <!--Cell Container Style-->
    <Style x:Key="cellContainerStyle"
         TargetType="ay:AyTableViewCell">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels"
            Value="True" />
        <Setter Property="HorizontalContentAlignment"
            Value="Center" />
        <Setter Property="VerticalContentAlignment"
            Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewCell">
                    <Grid>
                        <Border x:Name="SelectTen" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding ColumnFocusBrush}" >
                        </Border>
                        <Border x:Name="selector" Background="#00000000" Padding="1">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Content="{Binding}"  
                                           Margin="{TemplateBinding ContentMargin}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultHeadTemplate}}"
                        >
                                </ContentPresenter>
                                <ContentPresenter x:Name="contentPresenter1" Content="{Binding}"   Visibility="Collapsed"
                              HorizontalAlignment="Stretch" 
                                          VerticalAlignment="Stretch" ContentTemplate="{Binding CellEditTemplate, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultHeadTemplate}}">
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEdit,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableViewCellsPresenter},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsEditCellNull,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableViewCell},Mode=FindAncestor}}" Value="false"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed">
                            </Setter>
                            <Setter TargetName="contentPresenter1" Property="Visibility" Value="Visible">
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.Cell}"></Condition>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="selector"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.Cell}"></Condition>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="selector"
                      Property="Background"
                      Value="{Binding  RowSelectedBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.RowTenSingle}"></Condition>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableViewCellsPresenter},Mode=FindAncestor}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SelectTen"
                      Property="Visibility"
                      Value="Collapsed" />

                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.RowTenNoSelect}"></Condition>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableViewCellsPresenter},Mode=FindAncestor}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SelectTen"
                      Property="Visibility"
                      Value="Collapsed" />

                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Cell Presenter Style-->
    <Style x:Key="cellsPresenterStyle"
         TargetType="ay:AyTableViewCellsPresenter">
        <Setter Property="ContextMenu" Value="{Binding RowContextMenu,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"></Setter>
        <Setter Property="IsSelected"
            Value="{Binding Selected,Mode=TwoWay}" />
        <Setter Property="IsEdit" Value="{Binding IsEditRow,Mode=TwoWay}"/>
        <Setter Property="HasRowDetail" Value="{Binding HasRowDetail,Mode=TwoWay}"/>
        <Setter Property="AyTableViewRowStatus" Value="{Binding RowStatus,Mode=TwoWay}"/>

        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ItemContainerStyle"
            Value="{StaticResource cellContainerStyle}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ay:AyTableViewCellsPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewCellsPresenter">
                    <Grid x:Name="bdGridBack" Background="Transparent">
                        <Border x:Name="focusBdr" Background="Transparent" BorderThickness="0,0,0,0" VerticalAlignment="Top"
                                 BorderBrush="{Binding  HeadBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                Height="{Binding RowHeight,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                            MinHeight="{Binding MinRowHeight,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                            MaxHeight="{Binding MaxRowHeight,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                            <ItemsPresenter/>
                        </Border>
                        <ContentPresenter x:Name="detailContent" Content="{Binding}"   Visibility="Collapsed"
                              HorizontalAlignment="Stretch"  Margin="{Binding ActualHeight,ElementName=focusBdr,Converter={DoubleToThicknessConverter}}" 
                                          VerticalAlignment="Stretch"
                              ContentTemplate="{Binding RowDetailTemplate,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RowClickMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static ay:AyTableView+RowClickModes.RowDetail}"></Condition>
                                <Condition Binding="{Binding HasRowDetail,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="detailContent"
                      Property="Visibility" Value="Visible"
                       >
                            </Setter>

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding AlterLineBrushSupport,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="true"></Condition>
                                <Condition Binding="{Binding IsAlterRowLine,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="bdGridBack"
                      Property="Background" Value="{Binding AlterLineBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                       >
                            </Setter>

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.Single}"></Condition>
                                <Condition Binding="{Binding Selected}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.RowTenSingle}"></Condition>
                                <Condition Binding="{Binding Selected}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.Multiple}"></Condition>
                                <Condition Binding="{Binding Selected}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.NoSelect}"></Condition>
                                <Condition Binding="{Binding Selected}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectionMode,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" Value="{x:Static  ay:AyTableViewSelectionMode.RowTenNoSelect}"></Condition>
                                <Condition Binding="{Binding Selected}" Value="false"></Condition>
                                <Condition Binding="{Binding IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"></Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiDataTrigger>

                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                     Value="false"></Condition>
                                <Condition Property="IsMouseOver"
                     Value="True"></Condition>
                            </MultiTrigger.Conditions>HeaderStaticForeground
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowHoverBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />

                        </MultiTrigger>-->
                        <DataTrigger Binding="{Binding Selected}" Value="true">
                            <Setter TargetName="focusBdr"
                      Property="Background"
                      Value="{Binding  RowSelectedBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />
                            <Setter 
                      Property="Foreground"
                      Value="{Binding  SelectedRowForeground,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}" />
                        </DataTrigger>
                        <!--<Trigger Property="IsSelected"
                     Value="True">
                          
                        </Trigger>-->



                        <!--<Trigger Property="IsFocused"
                     Value="True">
                            <Setter TargetName="focusBdr"   Property="Background"
                      Value="{StaticResource Brush_Focus}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Rows Presenter Style-->
    <Style x:Key="rowsPresenterStyle"
         TargetType="{x:Type ay:AyTableViewRowsPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ay:AyTableViewRowsPanel x:Name="PART_RowsPanel"
                                 SnapsToDevicePixels="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing"
            Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode"
            Value="Recycling" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewRowsPresenter">
                    <ScrollViewer Name="PART_ScrollViewer" 
                         Style="{Binding ScrollViewerStyle,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor},TargetNullValue={StaticResource ScrollViewerStyle}}"
                                 CanContentScroll="true"
                        Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="{Binding (ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                  ScrollViewer.VerticalScrollBarVisibility="{Binding (ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                        VerticalContentAlignment="Center">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="rowsPresenterStyleKey"
         TargetType="{x:Type ay:AyTableViewRowsPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <!--<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>-->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ay:AyTableViewRowsPanel x:Name="PART_RowsPanel"
                                 SnapsToDevicePixels="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing"
            Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ay:AyTableViewRowsPresenter">
                    <ScrollViewer Name="PART_ScrollViewer"       CanContentScroll="true"
                        Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="{Binding (ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                  ScrollViewer.VerticalScrollBarVisibility="{Binding (ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                  Style="{Binding ScrollViewerStyle,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
          
                        VerticalContentAlignment="Center">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--AyTableView Style-->
    <Style x:Key="AyTableViewKeyDefault" TargetType="{x:Type ay:AyTableView}" BasedOn="{StaticResource CommonControlStyle}">
        <Style.Resources>
            <ControlTemplate x:Key="tableViewRow2Style" TargetType="ay:AyTableView">
                <Border x:Name="table" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                                                            Background="{TemplateBinding Background}">
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="AUTO" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                    BorderThickness="{Binding HeaderBorderThickness,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    BorderBrush="{Binding HeaderBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    Background="{Binding HeadBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                            <Grid >
                                <ay:AyTableViewHeaderPresenter   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />
                                <ay:AyTableViewHeaderPresenter  Height="{TemplateBinding HeaderHeight}"  x:Name="PART_HeaderPresenter2" 
                                            Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnSubHeaderStyle}" 
                                         ItemsSource="{Binding Path=ColumnsHead, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerSubPresenterStyle}" />

                            </Grid>
                        </Border>

                        <!--<ay:AyTableViewHeaderPresenter Grid.Row="0"   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />-->
                        <ContentPresenter Content="{Binding EmptyDataResultTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp1"
                                              ></ContentPresenter>
                        <ay:AyTableViewRowsPresenter Grid.Row="1"
                                       x:Name="PART_RowsPresenter"
                                       ItemContainerStyle="{StaticResource cellsPresenterStyle}"
                                       ItemsSource="{Binding Path=ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                                         Style="{StaticResource rowsPresenterStyle}"
                                     />
                        <ContentPresenter Content="{Binding BusyingTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp2"
                                              ></ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ItemsCount" Value="0">
                        <Setter TargetName="cp1" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsBusy" Value="true">
                        <Setter TargetName="cp1" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_RowsPresenter" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="cp2" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <!--<Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.Select}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyle}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.MannalCellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.RowEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.CellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>-->

                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="tableViewRow1Style" TargetType="ay:AyTableView">
                <Border x:Name="table" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                                                            Background="{TemplateBinding Background}">
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="AUTO" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                    BorderThickness="{Binding HeaderBorderThickness,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    BorderBrush="{Binding HeaderBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    Background="{Binding HeadBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                            <Grid >
                                <ay:AyTableViewHeaderPresenter   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />
                            </Grid>
                        </Border>

                        <!--<ay:AyTableViewHeaderPresenter Grid.Row="0"   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />-->
                        <ContentPresenter Content="{Binding EmptyDataResultTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp1"
                                              ></ContentPresenter>
                        <ay:AyTableViewRowsPresenter Grid.Row="1"
                                       x:Name="PART_RowsPresenter"
                                       ItemContainerStyle="{StaticResource cellsPresenterStyle}"
                                       ItemsSource="{Binding Path=ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                                         Style="{StaticResource rowsPresenterStyle}"
                                     />
                        <ContentPresenter Content="{Binding BusyingTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp2"
                                              ></ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ItemsCount" Value="0">
                        <Setter TargetName="cp1" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsBusy" Value="true">
                        <Setter TargetName="cp1" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_RowsPresenter" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="cp2" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <!--<Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.Select}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyle}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.MannalCellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.RowEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.CellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>-->

                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="BorderBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="HeadBrush" Value="{DynamicResource backgroundcolorbase}"/>
        <Setter Property="HeaderResizeBorderBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="HeaderStaticForeground" Value="{DynamicResource colortextsecondary}"/>
        <Setter Property="GridLinesBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="RowSelectedBrush" Value="{DynamicResource colorprimary5}"/>
        <Setter Property="HeaderBorderBrush"  Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="RowHoverBrush" Value="{DynamicResource backgroundcolorbase}"/>
        <Setter Property="ShowHorizontalGridLines" Value="true"/>
        <Setter Property="ShowVerticalGridLines" Value="True"/>
        <Setter Property="RowHeight" Value="40"/>
        <Setter Property="HeaderHeight" Value="40"/>
        <Setter Property="HeaderFontFamily" Value="{DynamicResource NormalFontFamily}"/>
        <Setter Property="HeaderFontSize" Value="{DynamicResource NormalFontSize}"/>
        <Setter Property="HeadFontWeight" Value="Bold"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FocusVisualStyle" Value=   "{x:Null}"/>
        <Setter Property="AllowDrop"
            Value="False" />

        <Setter Property="Template" Value="{StaticResource tableViewRow1Style}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="HeadRowCount" Value="2">
                <Setter Property="Template" Value="{StaticResource tableViewRow2Style}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AyTableViewKey" TargetType="{x:Type ay:AyTableView}" BasedOn="{StaticResource CommonControlStyle}">
        <Style.Resources>
            <ControlTemplate x:Key="tableViewRow2Style" TargetType="ay:AyTableView">
                <Border x:Name="table" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                                                            Background="{TemplateBinding Background}">
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="AUTO" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                    BorderThickness="{Binding HeaderBorderThickness,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    BorderBrush="{Binding HeaderBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    Background="{Binding HeadBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                            <Grid >
                                <ay:AyTableViewHeaderPresenter   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />
                                <ay:AyTableViewHeaderPresenter  Height="{TemplateBinding HeaderHeight}"  x:Name="PART_HeaderPresenter2" 
                                            Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnSubHeaderStyle}" 
                                         ItemsSource="{Binding Path=ColumnsHead, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerSubPresenterStyle}" />

                            </Grid>
                        </Border>

                        <!--<ay:AyTableViewHeaderPresenter Grid.Row="0"   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />-->
                        <ContentPresenter Content="{Binding EmptyDataResultTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp1"
                                              ></ContentPresenter>
                        <ay:AyTableViewRowsPresenter Grid.Row="1"
                                       x:Name="PART_RowsPresenter"
                                       ItemContainerStyle="{StaticResource cellsPresenterStyle}"
                                       ItemsSource="{Binding Path=ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                                         Style="{StaticResource rowsPresenterStyleKey}"
                                     />
                        <ContentPresenter Content="{Binding BusyingTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp2"
                                              ></ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ItemsCount" Value="0">
                        <Setter TargetName="cp1" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsBusy" Value="true">
                        <Setter TargetName="cp1" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_RowsPresenter" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="cp2" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <!--<Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.Select}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyle}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.MannalCellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.RowEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.CellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>-->

                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="tableViewRow1Style" TargetType="ay:AyTableView">
                <Border x:Name="table" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                                                            Background="{TemplateBinding Background}">
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="AUTO" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                    BorderThickness="{Binding HeaderBorderThickness,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    BorderBrush="{Binding HeaderBorderBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}"
                                    Background="{Binding HeadBrush,RelativeSource={RelativeSource AncestorType={x:Type ay:AyTableView},Mode=FindAncestor}}">
                            <Grid >
                                <ay:AyTableViewHeaderPresenter   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />

                            </Grid>
                        </Border>

                        <!--<ay:AyTableViewHeaderPresenter Grid.Row="0"   Height="{TemplateBinding HeaderHeight}"
                                         x:Name="PART_HeaderPresenter"    Visibility="{Binding Path=HeadVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         ItemContainerStyle="{StaticResource columnHeaderStyle}"
                                         ItemsSource="{Binding Path=Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                         Style="{StaticResource headerPresenterStyle}" />-->
                        <ContentPresenter Content="{Binding EmptyDataResultTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp1"
                                              ></ContentPresenter>
                        <ay:AyTableViewRowsPresenter Grid.Row="1"
                                       x:Name="PART_RowsPresenter"
                                       ItemContainerStyle="{StaticResource cellsPresenterStyle}"
                                       ItemsSource="{Binding Path=ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}"
                                                         Style="{StaticResource rowsPresenterStyleKey}"
                                     />
                        <ContentPresenter Content="{Binding BusyingTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ay:AyTableView}}}" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Visibility="Collapsed" x:Name="cp2"
                                              ></ContentPresenter>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ItemsCount" Value="0">
                        <Setter TargetName="cp1" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsBusy" Value="true">
                        <Setter TargetName="cp1" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_RowsPresenter" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="cp2" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <!--<Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.Select}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyle}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.MannalCellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.RowEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>
                        <Trigger Property="RowClickMode" Value="{x:Static ay:AyTableView+RowClickModes.CellEdit}">
                            <Setter TargetName="PART_RowsPresenter" Property="Style" Value="{StaticResource rowsPresenterStyleStandard}"/>
                        </Trigger>-->

                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="BorderBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="HeadBrush" Value="{DynamicResource backgroundcolorbase}"/>
        <Setter Property="HeaderResizeBorderBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="HeaderStaticForeground" Value="{DynamicResource colortextsecondary}"/>
        <Setter Property="GridLinesBrush" Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="RowSelectedBrush" Value="{DynamicResource colorprimary5}"/>
        <Setter Property="HeaderBorderBrush"  Value="{DynamicResource bordercolorlighter}"/>
        <Setter Property="RowHoverBrush" Value="{DynamicResource backgroundcolorbase}"/>
        <Setter Property="ShowHorizontalGridLines" Value="true"/>
        <Setter Property="ShowVerticalGridLines" Value="True"/>
        <Setter Property="RowHeight" Value="40"/>
        <Setter Property="HeaderHeight" Value="40"/>
        <Setter Property="HeaderFontFamily" Value="{DynamicResource NormalFontFamily}"/>
        <Setter Property="HeaderFontSize" Value="{DynamicResource NormalFontSize}"/>
        <Setter Property="HeadFontWeight" Value="Bold"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop"
            Value="False" />
        <Setter Property="Template" Value="{StaticResource tableViewRow1Style}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="HeadRowCount" Value="2">
                <Setter Property="Template" Value="{StaticResource tableViewRow2Style}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RadioButtonBigStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ayRadioButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Ellipse IsHitTestVisible="False"  x:Name="radioFocusBorder" Stroke="{StaticResource colorprimary}" StrokeThickness="2" Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Ellipse.Effect>
                                        <BlurEffect  Radius="3" />
                                    </Ellipse.Effect>
                                </Ellipse>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="24" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">

                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="16">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                            </EasingDoubleKeyFrame>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="16">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="radioButtonBorder">
                                            <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{Binding Source={StaticResource colorprimary},Path=Color}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame Value="{Binding Source={StaticResource colorprimary},Path=Color}" >
                                                <EasingColorKeyFrame.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseOut"/>
                                                </EasingColorKeyFrame.EasingFunction>
                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard/>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid x:Name="grid">

                            <Ellipse Stroke="{StaticResource bordercolorbase}" StrokeThickness="1" x:Name="radioButtonBorder" Fill="#FFFFFF" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Ellipse x:Name="optionMark" Fill="{StaticResource colorprimary}" Width="0" Height="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="radioFocusBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyRadioBoxListStyle"  TargetType="{x:Type ay:AyRadioBoxList}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="AyToolTipForeground"
                Value="{StaticResource colorprimary}" />
        <Setter Property="AyToolTipBackground"
                Value="{StaticResource colorprimary2}" />
        <Setter Property="AyToolTipBorderBrush"
                Value="{StaticResource colorprimary5}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyRadioBoxList}">

                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">
                        <Border HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                x:Name="highlightBd"
                                Visibility="Collapsed"
                                Background="{DynamicResource colorprimary2}"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource colorprimary3}">

                        </Border>
                        <ay:AyItemsControlAll x:Name="item_host" Margin="2"
                                                   Template="{DynamicResource ItemsControlScrollViewerTemplate}"
                                                   PanelType="{Binding PanelType,RelativeSource={RelativeSource AncestorType=ay:AyRadioBoxList}}"
                                                   ItemsSource="{TemplateBinding ItemsSource}">
                            <ay:AyItemsControlAll.ItemTemplate>
                                <DataTemplate>
                                    <RadioButton Content="{Binding ItemText}"
                                                 Margin="{Binding ItemMargin,RelativeSource={RelativeSource AncestorType=ay:AyRadioBoxList,Mode=FindAncestor}}" 
                                                 Style="{Binding ItemStyle,RelativeSource={RelativeSource AncestorType=ay:AyRadioBoxList,Mode=FindAncestor}}"
                                                 GroupName="{Binding GroupName,RelativeSource={RelativeSource AncestorType=ay:AyRadioBoxList,Mode=FindAncestor}}"
                                                 Tag="{Binding ItemValue}"
                                                 IsChecked="{Binding IsChecked}">
                                        <ay:Interaction.Triggers>
                                            <ay:EventTrigger EventName="Click">
                                                <ay:CallMethodAction MethodName="UpdateCheckedState"
                                                                     TargetObject="{Binding RelativeSource={RelativeSource AncestorType=ay:AyRadioBoxList,Mode=FindAncestor}}" />
                                            </ay:EventTrigger>
                                        </ay:Interaction.Triggers>
                                    </RadioButton>
                                </DataTemplate>
                            </ay:AyItemsControlAll.ItemTemplate>
                        </ay:AyItemsControlAll>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlight"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="highlightBd"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AyCheckBoxListStyle" TargetType="{x:Type ay:AyCheckBoxList}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="AyToolTipForeground"
                Value="{StaticResource colorprimary}" />
        <Setter Property="AyToolTipBackground"
                Value="{StaticResource colorprimary2}" />
        <Setter Property="AyToolTipBorderBrush"
                Value="{StaticResource colorprimary5}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyCheckBoxList}">

                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                x:Name="highlightBd"
                                Visibility="Collapsed"
                                Grid.Row="1" 
                  Background="{DynamicResource colorprimary2}"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource colorprimary3}">
                        </Border>

                        <ay:AyItemsControlAll x:Name="item_host" Margin="2"
                                                   Template="{DynamicResource ItemsControlScrollViewerTemplate}"
                                                   Grid.Row="1"
                                      
                                                   PanelType="{Binding PanelType,RelativeSource={RelativeSource AncestorType=ay:AyCheckBoxList}}"
                                                   ItemsSource="{TemplateBinding ItemsSource}">
                            <ay:AyItemsControlAll.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox Content="{Binding ItemText}" Style="{Binding ItemStyle,RelativeSource={RelativeSource AncestorType=ay:AyCheckBoxList}}"
                                              Margin="{Binding ItemMargin,RelativeSource={RelativeSource AncestorType=ay:AyCheckBoxList}}"
                                              Tag="{Binding ItemValue}"
                                              IsChecked="{Binding IsChecked}">
                                        <ay:Interaction.Triggers>
                                            <ay:EventTrigger EventName="Click">
                                                <ay:CallMethodAction MethodName="UpdateCheckedState"
                                                                     TargetObject="{Binding RelativeSource={RelativeSource AncestorType=ay:AyCheckBoxList}}" />
                                            </ay:EventTrigger>
                                        </ay:Interaction.Triggers>
                                    </CheckBox>
                                </DataTemplate>
                            </ay:AyItemsControlAll.ItemTemplate>
                        </ay:AyItemsControlAll>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlight"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="highlightBd"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="AyTreeArrow" Figures="M470,148 L409.5,90.5 409.5,208.5 z" />
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CommonControlStyle}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Width="{Binding Width}"
                        Height="{Binding Height}"
                        Background="#00FFFFFF">
                        <Viewbox 
                            Height="9"
                            Margin="10,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                            <Path Fill="{StaticResource colortextplaceholder}"
                                x:Name="ExpandPath"              RenderTransformOrigin="0.5,0.5"
                                Data="{StaticResource AyTreeArrow}"
                                Stretch="Fill">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}, Path=IsExpanded}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonNormalBackground" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" >
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1"  Value="#00FFFFFF" >

                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame  KeyTime="0:0:0.1"  Value="{Binding Source={StaticResource backgroundcolorbase},Path=Color}" >

                                            </EasingColorKeyFrame>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bd"
                            Background="#00FFFFFF"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true" UseLayoutRounding="True"/>


                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="itemContent" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                            <TextElement.Foreground>
                                <SolidColorBrush Color="{Binding Source={StaticResource colortextregular},Path=Color}" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ATVItemContainerStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Story.AyTreeViewItem.Mouseover">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Expander" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource backgroundcolorbase.color}">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.MouseLeave">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Expander" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#00FFFFFF">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.MouseLeave2">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#00FFFFFF">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.Selected">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0"  Value="{StaticResource backgroundcolorbase.color}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.Expand">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="90" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.ExpandOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <StackPanel HorizontalAlignment="Stretch">
                        <Grid  Height="{Binding TreeViewItemHeight, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}">

                            <Grid HorizontalAlignment="Stretch">
                                <ToggleButton 
                                                    x:Name="Expander"
                                                    Width="auto" Background="#00FFFFFF"
                                                    Height="auto" 
                                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                    ClickMode="Press"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                                    Style="{StaticResource ToggleButtonTransparent}"></ToggleButton>
                                <Border
                                        x:Name="BorderHoverDiv"  IsHitTestVisible="False"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                                        VerticalAlignment="Stretch"
                                        Background="#00FFFFFF"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True">
                                </Border>

                                <Grid x:Name="tviLayoutBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{Binding FirstAyTreeViewItemPadding, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}" >
                                    <Grid x:Name="tviLayout"  Margin="{TemplateBinding Padding}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <Viewbox 
                            Height="9"
                            Margin="10,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                                            <Path Fill="{StaticResource colortextplaceholder}"
                                x:Name="ExpandPath"              RenderTransformOrigin="0.5,0.5"
                                Data="{StaticResource AyTreeArrow}"
                                Stretch="Fill">
                                                <Path.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform />
                                                        <SkewTransform />
                                                        <RotateTransform />
                                                        <TranslateTransform />
                                                    </TransformGroup>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Viewbox>


                                        <ContentPresenter
                                                    x:Name="PART_Header"
                                                    Grid.Column="1" VerticalAlignment="Stretch"
                                                    HorizontalAlignment="Stretch" 
                                                    ContentSource="Header" RecognizesAccessKey="False"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Grid>
                            </Grid>


                        </Grid>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Children.Count}" Value="0">
                            <Setter TargetName="ExpandPath" Property="Visibility" Value="Hidden" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="false">
                            <Setter TargetName="tviLayout" Property="Margin" Value="{Binding Depth, Converter={StaticResource IndentConverter}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="true">
                            <Setter Property="Margin" Value="0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsExpanded}" Value="true">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.Expand}" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.ExpandOff}" />
                            </DataTrigger.ExitActions>
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="true" />
                                <Condition Binding="{Binding ParentCategory.IsExpanded}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="{Binding Depth, Converter={StaticResource IndentConverter}}" />
                        </MultiDataTrigger>
                        <!--<MultiDataTrigger> <MultiDataTrigger.Conditions> <Condition Binding="{Binding TreeViewAnimationIsOpen,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTreeView}}}" Value="false"/> <Condition Binding="{Binding IsExpanded}" Value="true"/> </MultiDataTrigger.Conditions> <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" /> </MultiDataTrigger>-->
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="IsHitTestVisible" Value="false" />
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="BorderHoverDiv" Property="Visibility" Value="Visible" />
                                </Trigger>-->
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.Selected}" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.MouseLeave2}" />
                            </DataTrigger.ExitActions>
                            <!--<Setter TargetName="BorderHoverDiv" Property="Visibility" Value="Collapsed" />-->
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.Mouseover}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.MouseLeave}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsExpanded" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ATVItemContainerStyleEnabledFalse" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Story.AyTreeViewItem.Mouseover">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv0" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource backgroundcolorbase.color}">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.MouseLeave">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv0" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#00FFFFFF">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.MouseLeave2">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#00FFFFFF">
                                </EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Story.AyTreeViewItem.Selected">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="BorderHoverDiv" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0"  Value="{StaticResource backgroundcolorbase.color}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <StackPanel HorizontalAlignment="Stretch" Background="Transparent">
                        <Grid  Height="{Binding TreeViewItemHeight, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}">
                            <Grid HorizontalAlignment="Stretch">
                                <Border 
                                        x:Name="BorderHoverDiv0"  IsHitTestVisible="False"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                                        VerticalAlignment="Stretch"
                                        Background="#00FFFFFF"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True">
                                </Border>
                                <Border 
                                        x:Name="BorderHoverDiv"  IsHitTestVisible="False"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}"
                                        VerticalAlignment="Stretch"
                                        Background="#00FFFFFF"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True">
                                </Border>


                                <Grid  x:Name="tviLayoutBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                               Margin="{Binding FirstAyTreeViewItemPadding, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}" >
                                    <Grid x:Name="tviLayout"  Margin="{TemplateBinding Padding}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="24" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <ToggleButton 
                                                    x:Name="Expander"
                                                    Width="auto" Background="red"
                                                    Height="auto" 
                                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                    ClickMode="Press"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                                    Style="{StaticResource ExpandCollapseToggleStyle}"></ToggleButton>
                                        <ContentPresenter
                                                    x:Name="PART_Header"
                                                    Grid.Column="1" VerticalAlignment="Stretch"
                                                    HorizontalAlignment="Stretch" 
                                                    ContentSource="Header" RecognizesAccessKey="False"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Grid>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Children.Count}" Value="0">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="false">
                            <Setter TargetName="tviLayout" Property="Margin" Value="{Binding Depth, Converter={StaticResource IndentConverter}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="true">
                            <Setter Property="Margin" Value="0" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsExpanded}" Value="true">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TreeViewAnimationIsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ay:AyTreeView}}}" Value="true" />
                                <Condition Binding="{Binding ParentCategory.IsExpanded}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="{Binding Depth, Converter={StaticResource IndentConverter}}" />
                        </MultiDataTrigger>
                        <!--<MultiDataTrigger> <MultiDataTrigger.Conditions> <Condition Binding="{Binding TreeViewAnimationIsOpen,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ay:AyTreeView}}}" Value="false"/> <Condition Binding="{Binding IsExpanded}" Value="true"/> </MultiDataTrigger.Conditions> <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" /> </MultiDataTrigger>-->
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="IsHitTestVisible" Value="false" />
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="BorderHoverDiv" Property="Visibility" Value="Visible" />
                                </Trigger>-->
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.Selected}" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.MouseLeave2}" />
                            </DataTrigger.ExitActions>
                            <!--<Setter TargetName="BorderHoverDiv" Property="Visibility" Value="Collapsed" />-->
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.Mouseover}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Story.AyTreeViewItem.MouseLeave}" />
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsExpanded" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Value="{StaticResource DisabledOpacity}" Property="Opacity" />
                            <Setter Value="No" Property="Cursor" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ay:AyTreeView}" TargetType="{x:Type ay:AyTreeView}" BasedOn="{StaticResource CommonControlStyle}">
        <Style.Resources>
            <HierarchicalDataTemplate
                x:Key="TreeNodeTemplate"
                DataType="{x:Type ay:AyTreeViewItemModel}"
                ItemsSource="{Binding Children}">
                <StackPanel  x:Name="Item_Box" Height="{Binding TreeViewItemHeight, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}" Orientation="Horizontal"  Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                    <ay:AyIconAll HorizontalAlignment="Left"
                            x:Name="tvIcon"
                            Width="{Binding IconWidth, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                            Height="{Binding IconHeight, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                            Margin="0,0,0,0"
                            VerticalAlignment="Center"
                            FontSize="{Binding IconFontSize, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                            Foreground="{Binding Foreground, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                            Icon="{Binding Icon, Mode=TwoWay}" />
                    <ay:AyText
                        x:Name="textShow"
                        Margin="10,0,0,0" FontSize="{Binding FontSize, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"  
                        Text="{Binding Text}" />
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate
                x:Key="Text_TreeNodeTemplate"
                DataType="{x:Type ay:AyTreeViewItemModel}"
                ItemsSource="{Binding Children}">
                <StackPanel x:Name="Item_Box" Height="{Binding TreeViewItemHeight, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}" Orientation="Horizontal"  Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                    <ay:AyText
                        x:Name="textShow"
                        Margin="0,0,0,0" FontSize="{Binding FontSize, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"  
                        Text="{Binding Text}" />
                </StackPanel>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate
                x:Key="CheckBoxText_TreeNodeTemplate"
                DataType="{x:Type ay:AyTreeViewItemModel}"
                ItemsSource="{Binding Children}">
                <StackPanel x:Name="Item_Box"
                            Height="{Binding TreeViewItemHeight, RelativeSource={RelativeSource AncestorType={x:Type ay:AyTreeView}, Mode=FindAncestor}}" 
                            Orientation="Horizontal"  Background="Transparent" 
                            HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
                    <CheckBox x:Name="cb" IsThreeState="True"  Content="{Binding Text}" IsChecked="{Binding IsChecked}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                </StackPanel>
                <HierarchicalDataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Children.Count}" Value="0">
                        <Setter Property="IsThreeState" TargetName="cb" Value="false"/>
                    </DataTrigger>
                </HierarchicalDataTemplate.Triggers>
            </HierarchicalDataTemplate>
        </Style.Resources>
        <Setter Property="SelectedRightSJXBrush" Value="Transparent" />
        <Setter Property="IconFontSize" Value="14" />
        <Setter Property="SelectedRightSJXOpacity" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TreeViewItemHeight" Value="30" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="ay:AyTreeViewService.Enabled" Value="true" />
        <Setter Property="ItemTemplate" Value="{StaticResource TreeNodeTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ATVItemContainerStyle}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ay:AyTreeView}">
                    <Border
                        Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer CanContentScroll="False" Focusable="False">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="AyTreeMode" Value="Text">
                <Setter Property="ItemTemplate" Value="{StaticResource Text_TreeNodeTemplate}" />
            </Trigger>
            <Trigger Property="AyTreeMode" Value="CheckBoxText">
                <Setter Property="ItemTemplate" Value="{StaticResource CheckBoxText_TreeNodeTemplate}" />
            </Trigger>
            <Trigger Property="ay:AyTreeViewService.Enabled" Value="false">
                <Setter Property="ItemContainerStyle" Value="{StaticResource ATVItemContainerStyleEnabledFalse}" />
            </Trigger>
        </Style.Triggers>
    </Style>



</local:ElementStylesBase>